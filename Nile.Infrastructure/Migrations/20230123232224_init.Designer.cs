// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nile.Infrastructure.Context;

#nullable disable

namespace Nile.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230123232224_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Nile.Domain.EntityModel.CartOrder", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("CartOrders");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ContentFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileId");

                    b.ToTable("ContentFiles");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingDetailShippindId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ShippingDetailShippindId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Succeeded")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"), 1L, 1);

                    b.Property<int>("CCV")
                        .HasColumnType("int");

                    b.Property<string>("NameOnPaymentCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentCardExipration")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentCardNumber")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasFilter("[FileId] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ProductsOfCartOrder", b =>
                {
                    b.Property<int>("ProductsOfCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductsOfCartId"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("CartOrderCartId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductsOfCartId");

                    b.HasIndex("CartOrderCartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsOfCarts");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ProductsOfOrder", b =>
                {
                    b.Property<int>("ProductsOfOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductsOfOrderId"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductsOfOrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsOfOrders");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ShippingDetail", b =>
                {
                    b.Property<int>("ShippindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippindId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShippindId");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingDetails");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.CartOrder", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.User", "User")
                        .WithMany("CartOrders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Order", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.ShippingDetail", null)
                        .WithMany("Orders")
                        .HasForeignKey("ShippingDetailShippindId");

                    b.HasOne("Nile.Domain.EntityModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Payment", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Nile.Domain.EntityModel.Payment", "OrderId");

                    b.HasOne("Nile.Domain.EntityModel.User", "User")
                        .WithOne("Payment")
                        .HasForeignKey("Nile.Domain.EntityModel.Payment", "UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.PaymentDetail", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.User", "User")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Product", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.ContentFile", "ContentFile")
                        .WithOne("Product")
                        .HasForeignKey("Nile.Domain.EntityModel.Product", "FileId");

                    b.Navigation("ContentFile");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ProductsOfCartOrder", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.CartOrder", "CartOrder")
                        .WithMany("ProductsOfCartOrders")
                        .HasForeignKey("CartOrderCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nile.Domain.EntityModel.Product", "Product")
                        .WithMany("ProductsOfCartOrders")
                        .HasForeignKey("ProductId");

                    b.Navigation("CartOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ProductsOfOrder", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.Order", "Order")
                        .WithMany("ProductsOfOrders")
                        .HasForeignKey("OrderId");

                    b.HasOne("Nile.Domain.EntityModel.Product", "Product")
                        .WithMany("ProductsOfOrders")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ShippingDetail", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.User", "User")
                        .WithMany("ShippingDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.UserRole", b =>
                {
                    b.HasOne("Nile.Domain.EntityModel.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Nile.Domain.EntityModel.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.CartOrder", b =>
                {
                    b.Navigation("ProductsOfCartOrders");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ContentFile", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Order", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("ProductsOfOrders");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Product", b =>
                {
                    b.Navigation("ProductsOfCartOrders");

                    b.Navigation("ProductsOfOrders");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.ShippingDetail", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Nile.Domain.EntityModel.User", b =>
                {
                    b.Navigation("CartOrders");

                    b.Navigation("Orders");

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("PaymentDetails");

                    b.Navigation("ShippingDetails");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
